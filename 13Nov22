Q4. Contains Duplicate? in an int array

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);                  // Main Line... 
        for(int i=0; i<nums.length-1; i++){
            
                if(nums[i]==nums[i+1]){
                    return true;
                
            }
         
        }
                return false;

        }

}

Q5. Chocolate Distribution Problem

static int findMinDiff(int arr[], int n, int m)
    {
      if (m == 0 || n == 0)
            return 0;
            
            Arrays.sort(arr);
    
      if (n < m)
            return -1;
        int min_diff = Integer.MAX_VALUE;


for (int i = 0; i + m - 1 < n; i++) {
            int diff = arr[i + m - 1] - arr[i];
            if (diff < min_diff)
                min_diff = diff;
        }
        return min_diff;
    }
    
    
    
Q6. Search in Rotated Sorted Array
class Solution {
     public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length-1;
        int mid;

        while(left<=right){
            mid = left+(right-left)/2;
            if(nums[mid] == target) 
            return mid;

            // condition for left side is sort
            if(nums[left]<=nums[mid]){  //so we are Searching "|LEFT___target___MID|...|RIGHT"
                if(target>=nums[left] && target <=nums[mid]){
                    right = mid-1;
                }else {
                    left = mid+1;
                }
            }

            
            else{       //else we are searching "|LEFT.....|MID___target___RIHT|"
                if(target>=nums[mid] && target <=nums[right]){
                    left = mid+1;
                }else{
                    right = mid-1;
                }
            }
    }
     return -1;   
    }

}
