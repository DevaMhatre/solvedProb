// STRINGS
//Q 6  Valid Palindrom              // BRUTE FORCE...

class Solution {
    public boolean isPalindrome(String s) {
         s= s.replaceAll("\\s" , "");            //Removes all spaces
         if(s==""){
            return true;
        }
        Stack<Character> st= new Stack<>();
        StringBuilder str = new StringBuilder();
        StringBuilder rev = new StringBuilder();
        s = s.toLowerCase();                    //convert to lower Case
        s = s.replaceAll("[^a-zA-Z0-9]", "");   //Remove non-Aphanumeric Char
        System.out.println(s);
        for(int i=0; i<s.length(); i++){
            char ch = s.charAt(i);
            if(!Character.isDigit(ch)){
                str.append(ch);
            }
        }


        for(int i=0; i<s.length(); i++){
            st.push(s.charAt(i));
        } 
        while(!st.isEmpty()){
            rev.append(st.pop());
        }

        String str2 = str.toString();
        String rev2 = rev.toString();
        // System.out.println(str);
        // System.out.println(str2.getClass());
        // System.out.println(str2.length());

        // System.out.println(rev);
        // System.out.println(rev2.getClass());
        // System.out.println(str2.length());




        if(str2.equals(rev2)){
            return true;
        }
         
    
        return false;
        
    }
}



// OPTIMIZED APPROCH!!!

 class Solution {
    public boolean isPalindrome(String s) {
        s = s.toLowerCase().replaceAll("[^a-z0-9]", "");//We First...toLowerCase & Then...Replace all the
                                                        // Character which not (^) Belongs TO [a-z0-9] with ""

        int i = 0;                              //First pointer is at 0th idx

        int j = s.length() - 1;                 //2nd pointer is as Last idx

        while(i <= j) {                         //loop till first pointer crosses last pointer

            if (s.charAt(i) != s.charAt(j)) {
                return false;                  // AT any Point both the Character not Matched... return
            }

            i++;
            j--;
        }
        return true;
    }
    }


Q7 Is VALID ANAGRAM

class Solution {
    public boolean isAnagram(String s, String t) {
        char temp1[] = s.toCharArray();
        char temp2[] = t.toCharArray();

        Arrays.sort(temp1);
        Arrays.sort(temp2);

        s = new String(temp1);
        t = new String(temp2);

        if(s.equals(t)){
            return true;
        }

        return false;
    }
}


Q8 . valid Paranthesis

class Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack<>();

        for(int i =0 ; i< s.length(); i++){                 //Single for loop for traversal
            char ch = s.charAt(i);
        
            if( ch =='[' || ch =='(' || ch=='{'){           //Stack Push for...Opening Paranthesis
                st.push(ch);
            }

            else{                                           //Else Condition for closing paranthesis
                // if(st.isEmpty()){                                    //IMP isEmpty condion ...whatIf ...if string contains only opening braces...st will be empty!
                //     return false;
                // }
                if( (st.peek()  == '(' && ch == ')' ) ||                //if st.peek and ch are vice varsa...keep going and poping
                    (st.peek() == '{' && ch == '}' )||
                    (st.peek() == '[' && ch ==']') )
                    {
                        st.pop();
                    }

                    else{                                               //if its not like that... then its a missMath...return false
                        return false;
                    }

                    }

                

                
            }

            if(st.isEmpty()){                                                           //IFFFFF stack is empty then only ...its valid paranthesis
                return true;
            }
            else{
                return false;
            }


    }
}


//Q. 9 Logest Common Prefix  in given SubString Array!

class Solution {
    
public String longestCommonPrefix(String[] strs) {

    if (strs.length == 0) 
        return "";

    String prefix = strs[0];                //Firstly we will take 1st word in "Prefix"

    for (int i = 1; i < strs.length; i++){
        while (strs[i].indexOf(prefix) != 0) {  // returns the index within this string 'of the 
                                                // first occurrence' of the specified substring

            prefix = prefix.substring(0    , prefix.length() - 1);
            // we should cut down the prefix a little bit (remove the last character)

            if (prefix.isEmpty()) 
                return "";
        }    
    }    
    return prefix;
}
}




